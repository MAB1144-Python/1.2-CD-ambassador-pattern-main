# Implementación del Patrón Ambassador con NGINX y Docker

Este proyecto demuestra la implementación del **Patrón Ambassador** con **NGINX** en un entorno **Docker**. Se utiliza un servicio de NGINX como embajador para distribuir las solicitudes entrantes entre dos servidores backend, enviando **el 90% del tráfico al servidor principal y el 10% al servidor experimental**.

---

## 🛠️ Tecnologías utilizadas
- Docker
- Docker Compose
- NGINX
- Python (Flask)

---

## 📁 Estructura del Proyecto
```bash
ambassador-pattern/
│-- nginx/
│   │-- nginx.conf
│   └-- Dockerfile
│-- backend/
│   │-- main_server.py
│   │-- exp_server.py
│   └-- Dockerfile
│-- docker-compose.yml
│-- README.md
```

---

## 💡 Configuración y Archivos Clave

### **1. Configuración de NGINX (`nginx/nginx.conf`)**
Este archivo configura NGINX para dividir el tráfico entre los servidores backend usando `split_clients`.
```nginx
events {}

http {
    split_clients "${remote_addr}" $backend {
        90% "main";
        10% "exp";
    }

    upstream main {
        server main:5000;
    }

    upstream exp {
        server exp:5000;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://$backend;
        }
    }
}
```

### **2. Servidores Backend**

#### **Servidor Principal (`backend/main_server.py`)**
```python
from flask import Flask

app = Flask(__name__)

@app.route('/')
def main():
    return "Response from Main Server"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

#### **Servidor Experimental (`backend/exp_server.py`)**
```python
from flask import Flask

app = Flask(__name__)

@app.route('/')
def experiment():
    return "Response from Experimental Server"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

### **3. Configuración de Docker**
#### **Dockerfile para NGINX (`nginx/Dockerfile`)**
```dockerfile
FROM nginx:alpine
COPY nginx.conf /etc/nginx/nginx.conf
```

#### **Dockerfile para los servidores (`backend/Dockerfile`)**
```dockerfile
FROM python:3.9
WORKDIR /app
COPY . .
RUN pip install flask
CMD ["python", "main_server.py"]
```

---

## 🛠️ Configuración y Ejecución

1. **Clonar el repositorio**
   ```bash
   git clone https://github.com/tu-repositorio/ambassador-pattern.git
   cd ambassador-pattern
   ```

2. **Construir y ejecutar los contenedores**
   ```bash
   docker-compose up --build
   ```

3. **Probar la configuración**
   Abre un navegador o usa `curl` para enviar solicitudes a `localhost:8080`:
   ```bash
   curl http://localhost:8080
   ```
   El 90% de las veces responderá `Response from Main Server` y el 10% `Response from Experimental Server`.

4. **Detener los contenedores**
   ```bash
   docker-compose down
   ```

---

## 🌟 Mejoras Futuras
- Implementar una versión en **Kubernetes**.
- Hacer que la división de tráfico sea configurable mediante variables de entorno.
- Integrar con herramientas de monitoreo como **Prometheus y Grafana**.

---

## 👤 Autor
**Tu Nombre**  
[GitHub](https://github.com/tu-usuario) | [LinkedIn](https://linkedin.com/in/tu-usuario)

💪 ¡Gracias por probar este proyecto! 🌟


## 🐍 Crear un Entorno Virtual en Python

Para aislar las dependencias del proyecto y evitar conflictos con otras versiones de paquetes, es recomendable crear un entorno virtual.

1. **Instalar `virtualenv`**
    Si no tienes `virtualenv` instalado, puedes instalarlo usando `pip`:
    ```bash
    pip install virtualenv
    ```

2. **Crear el entorno virtual**
    Navega al directorio del proyecto y crea un entorno virtual:
    ```bash
    python3 -m venv test-st/
    ```

3. **Activar el entorno virtual**
    - En Windows:
      ```bash
      ./test-st/Scripts/activate
      ```
    - En macOS y Linux:
      ```bash
      source venv/bin/activate
      ```

4. **Instalar dependencias**
    Con el entorno virtual activado, instala las dependencias necesarias:
    ```bash
    pip install locust
    ```

5. **Desactivar el entorno virtual**
    Una vez que hayas terminado de trabajar, puedes desactivar el entorno virtual:
    ```bash
    deactivate
    ```
## 🐍 Ejecución de los Servidores Backend

Para ejecutar los servidores backend de manera individual sin Docker, sigue estos pasos:

1. **Activar el entorno virtual**
    - En Windows:
        ```bash
        ./test-st/Scripts/activate
        ```
    - En macOS y Linux:
        ```bash
        source venv/bin/activate
        ```

2. **Ejecutar el servidor principal**
    Navega al directorio `backend` y ejecuta el servidor principal:
    ```bash
    locust -f locustfile.py --host http://localhost:9080
    ```


4. **Probar los servidores**
    Abre un navegador o usa `curl` para enviar solicitudes a `localhost:5000` para el servidor principal y `localhost:5000` para el servidor experimental:
    ```bash
    http://localhost:8089
    ```

---